Some Java

* hashCode
* deep copy versus shallow copy
* clone() and Cloneable
* "final" - why bother
* equals(). If you use "if (obj instanceof MyClass) ..."
then equals will not be symmetric. Give example and explain why.


* methods with variable number of args:

  printf(String format, Object arg1)
  printf(String format, Object arg1, Object arg2)
(double d1, double d2)
  average(double d1, double d2, double d3)
  average(double d1, double d2, double d3, double d4)
  etc.

  double average(String foo, double ... args) // zero or more
  {   // arguments are: args[0], args[1], args[2], ...
      double sum = 0.0;
      // treat the vararg like an array
      for(double d: args) sum += d;
      // same:  for(int k=0; k<args.length; k++) sum += args[k];
      n = args.length;
      if (n == 0) return 0.0;
      return sum/n;
        

Read: OODP Chapter 7

Generic Types
ArrayList<E>. To instantiate, you must provide a value for the 
type parameter E.
* E must be a class or interface:
  new ArrayList<String>( )
  new ArrayList<Runnable>( )
* E cannot be a primitive:
  new ArrayList<int>( )  // error
* if you omit the type parameter, default is "Object":
  new ArrayList()        // arraylist of Object

How Java implements Generic Types:
  type erasure

Type parameter in static methods:

   public static <E> E max(E ... args)

But that doesn't make sense.
To be specific that "max" only applies to Comparable objects,
write 
  public static <E extends Comparable> max(E ... args)
